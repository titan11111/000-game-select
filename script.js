
// BGM„ÇíÁÑ°ÂäπÂåñ„Åó„ÄÅÂäπÊûúÈü≥„ÅÆ„ÅøÂÜçÁîü„Åô„ÇãË®≠ÂÆö
// ‰ª•Ââç„ÅØ„Åì„Åì„ÅßÈÅ∏ÊäûÁîªÈù¢„ÅÆBGM„ÇíÂÜçÁîü„Åó„Å¶„ÅÑ„Åæ„Åó„Åü„Åå„ÄÅÁèæÂú®„ÅØÁÑ°ÂäπÂåñ„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ


// „Ç≤„Éº„É†„Éá„Éº„ÇøÔºàÊñ∞„Åó„ÅÑ„Ç≤„Éº„É†„ÇíËøΩÂä†Ôºâ
const gameData = [
    { title: 'ÈõªËªäÂÜíÈô∫ÔºöÁ∑öË∑Ø„ÅÆÊóÖ', category: 'adventure', keywords: 'ÈõªËªä ÂàóËªä ‰πó„ÇäÁâ©', url: 'https://titan11111.github.io/47-dennsya/', icon: 'üöÜ', isNew: true },
    { title: '„Éü„ÇøÔºöÊú™Áü•„ÅÆÂÜíÈô∫', category: 'adventure', keywords: '„Éü„Çø ÂÜíÈô∫', url: 'https://titan11111.github.io/46-mita/', icon: 'üëÄ', isNew: true },
    { title: 'È≠îÂ°îÔºöÈóá„ÅÆÂ°î„ÅÆË©¶Á∑¥', category: 'adventure', keywords: 'È≠îÂ°î Â°î „ÉÄ„É≥„Ç∏„Éß„É≥', url: 'https://titan11111.github.io/45-matou/', icon: 'üóº', isNew: true },
    { title: '„Å≠„Åè„Å≥2ÔºöÂ§¢Âπª„ÅÆÂÜíÈô∫', category: 'adventure', keywords: '„Å≠„Åè„Å≥ Áú†„Çä Â§¢', url: 'https://titan11111.github.io/44-nekubi2/', icon: 'üò¥', isNew: true },
    { title: 'Ê†ºÈóò„ÉÅ„É£„É≥„Éî„Ç™„É≥2ÔºöÊúÄÂº∑„ÅÆÊåëÊà¶ËÄÖ', category: 'battle action', keywords: 'Ê†ºÈóò „Éê„Éà„É´ ÂØæÊà¶', url: 'https://titan11111.github.io/43-kakuge2/', icon: 'ü•ä', isNew: true },
    { title: '„Ç∑„É•„Éº„ÉÜ„Ç£„É≥„Ç∞4ÔºöÂ§©Á©∫„ÅÆÊøÄÊà¶', category: 'action', keywords: '„Ç∑„É•„Éº„ÉÜ„Ç£„É≥„Ç∞ ÂÆáÂÆô ÂºæÂπï', url: 'https://titan11111.github.io/42-syutinngu/', icon: 'üöÄ', isNew: true },
    { title: '„Éõ„É©„ÉºËÑ±Âá∫2ÔºöÈóáÂ§ú„ÅÆÂÜçÊù•', category: 'adventure', keywords: '„Éõ„É©„Éº ÊÄñ„ÅÑ ËÑ±Âá∫', url: 'https://titan11111.github.io/41-horaa2/', icon: 'üëª', isNew: true },
    { title: 'Ê†ºÈóò„ÉÅ„É£„É≥„Éî„Ç™„É≥', category: 'battle action', keywords: 'Ê†ºÈóò „Éê„Éà„É´ ÂØæÊà¶', url: 'https://titan11111.github.io/40-kakuge/', icon: 'ü•ä', isNew: true },
    { title: '„Éõ„É©„ÉºËÑ±Âá∫', category: 'adventure', keywords: '„Éõ„É©„Éº ÊÄñ„ÅÑ ËÑ±Âá∫', url: 'https://titan11111.github.io/39-horaa/', icon: 'üëª', isNew: true },
    { title: '„Ç∑„É•„Éº„ÉÜ„Ç£„É≥„Ç∞3ÔºöÊòüÊµ∑„ÅÆÂ§ßÊ±∫Êà¶', category: 'action', keywords: '„Ç∑„É•„Éº„ÉÜ„Ç£„É≥„Ç∞ ÂÆáÂÆô ÂºæÂπï', url: 'https://titan11111.github.io/38-shoot3/', icon: 'üöÄ', isNew: true },
    { title: 'ÂÜíÈô∫RPGÔºö‰ºùË™¨„ÅÆÂßã„Åæ„Çä', category: 'adventure', keywords: 'RPG „Éï„Ç°„É≥„Çø„Ç∏„Éº ÂÜíÈô∫', url: 'https://titan11111.github.io/37-RPG/', icon: 'üßô‚Äç‚ôÇÔ∏è', isNew: true },
    { title: 'Â≠¶Âúí„Ç¢„Éâ„Éô„É≥„ÉÅ„É£„ÉºÔºö„Å≤„Åø„Å§„ÅÆÊîæË™≤Âæå', category: 'adventure', keywords: 'Â≠¶Âúí Â≠¶Ê†°', url: 'https://titan11111.github.io/35-gakuen/', icon: 'üè´', isNew: true },
    { title: '„Éá„É¢„É≥„Ç≠„É£„ÉÉ„Çπ„É´ÔºöÈ≠îÂüé„ÅÆË©¶Á∑¥', category: 'adventure', keywords: '„Éá„É¢„É≥ „Ç≠„É£„ÉÉ„Çπ„É´ È≠îÁâ©', url: 'https://titan11111.github.io/34-demon_castle/', icon: 'üè∞', isNew: true },
    { title: '„Å≠„Åè„Å≥ÔºöÂ§¢„Åø„ÇãÊóÖ‰∫∫', category: 'adventure', keywords: '„Å≠„Åè„Å≥ Áú†„Çä Â§¢', url: 'https://titan11111.github.io/33--nekubi/', icon: 'üò¥', isNew: true },
    { title: '„Ç∑„É•„Éº„ÉÜ„Ç£„É≥„Ç∞2ÔºöÁÇé„ÅÆÈÄÜË•≤', category: 'action', keywords: '„Ç∑„É•„Éº„ÉÜ„Ç£„É≥„Ç∞ Â∞ÑÊíÉ ÈÄ£Â∞Ñ', url: 'https://titan11111.github.io/32-shoot2/', icon: 'üéØ', isNew: true },
    { title: '„Ç∑„É•„Éº„ÉÜ„Ç£„É≥„Ç∞1ÔºöÂàù„ÇÅ„Å¶„ÅÆÊà¶Â†¥', category: 'action', keywords: '„Ç∑„É•„Éº„ÉÜ„Ç£„É≥„Ç∞ Â∞ÑÊíÉ', url: 'https://titan11111.github.io/31-shoot/', icon: 'üî´', isNew: true },
    { title: '‰∏ñÁïåÊ®πÊé¢Ê§úÔºö‰ºùË™¨„ÅÆÊ®π„ÇíÊ±Ç„ÇÅ„Å¶', category: 'adventure', keywords: 'Á•ûÁßò „Éï„Ç°„É≥„Çø„Ç∏„Éº ÂÜíÈô∫ ‰∏ñÁïåÊ®π Êé¢Ê§ú', url: 'https://titan11111.github.io/30-yugudora/', icon: 'üå≥', isNew: true },
    { title: '„ÇØ„Ç§„Ç∫4ÔºöË∂ÖÈõ£Âïè„ÉÅ„É£„É¨„É≥„Ç∏', category: 'quiz', keywords: '„ÇØ„Ç§„Ç∫ ÂïèÈ°å È†≠ËÑ≥', url: 'https://titan11111.github.io/titan11111-quiz4/', icon: 'üß†', isNew: true },
    { title: '„ÇØ„Ç§„Ç∫3Ôºö„Å≤„Çâ„ÇÅ„ÅçÂãùË≤†', category: 'quiz', keywords: '„ÇØ„Ç§„Ç∫ ÂïèÈ°å È†≠ËÑ≥', url: 'https://titan11111.github.io/28-quiz3/', icon: 'üß†' },
    { title: 'Ëø∑„ÅÑ„ÅÆÊ£ÆÔºö„Åï„Åï„ÇÑ„ÅèÊú®„ÄÖ„ÅÆË™ò„ÅÑ', category: 'adventure', keywords: 'Ê£Æ Ëø∑„ÅÑ Á•ûÁßò Êé¢Á¥¢', url: 'https://titan11111.github.io/27-mayoimori/', icon: 'üå≤' },
    { title: 'Âùä‰∏ª„ÇÅ„Åè„ÇäÔºöÈÅãË©¶„Åó„Éê„Éà„É´', category: 'quiz', keywords: 'Âùä‰∏ª „ÇÅ„Åè„Çä „Ç´„Éº„Éâ ‰ºùÁµ±', url: 'https://titan11111.github.io/26-bouzu/', icon: 'üé¥' },
    { title: 'Âπ≥Âíå„Å™‰∏ñÁïåÔºöÁôí„Åó„ÅÆ„Ç™„Ç¢„Ç∑„Çπ', category: 'adventure', keywords: 'Âπ≥Âíå ‰∏ñÁïå Áôí„Åó', url: 'https://titan11111.github.io/25-heiwa/', icon: 'üïäÔ∏è' },
    { title: '„Å≠„Åì„Å≠„Åì„Å≠„ÅìÔºö„Å´„ÇÉ„Çì„Åì„Éë„É¨„Éº„Éâ', category: 'action', keywords: '„Å≠„Åì Áå´ „Åü„Åè„Åï„Çì', url: 'https://titan11111.github.io/24-nekonekoneko/', icon: 'üò∏' },
    { title: 'Áµ¶È£üÂΩìÁï™„É™„Ç∫„É†Ôºö„Ç≠„ÉÉ„ÉÅ„É≥„Éì„Éº„Éà', category: 'action', keywords: 'Áµ¶È£ü „É™„Ç∫„É† Â≠¶Ê†°', url: 'https://titan11111.github.io/23-kyuusyoku/', icon: 'üçΩÔ∏è' },
    { title: '„Åä„Åï„Çì„ÅΩÊó•ÂíåÔºö„Å¶„Åè„Å¶„ÅèÂÜíÈô∫', category: 'adventure', keywords: 'Êï£Ê≠© Êé¢Á¥¢ „ÅÆ„Çì„Å≥„Çä', url: 'https://titan11111.github.io/21-sanpo/', icon: 'üö∂' },
    { title: 'ÂØæÁß∞„Éë„Ç∫„É´Ôºö„Éü„É©„Éº„ÅÆÈ≠îÊ≥ï', category: 'adventure', keywords: 'ÂØæÁß∞ „Éë„Ç∫„É´ Áæé„Åó„ÅÑ', url: 'https://titan11111.github.io/20-taisyou/', icon: '‚ú®' },
    { title: '„Çâ„Å£„ÅãÔºö„Çπ„Ç´„Ç§„Éâ„É≠„ÉÉ„Éó', category: 'action', keywords: 'ËêΩ‰∏ã „Ç¢„ÇØ„Ç∑„Éß„É≥ „Çπ„Éî„Éº„Éâ ÂèçÂ∞ÑÁ•ûÁµå', url: 'https://titan11111.github.io/19-rakka/', icon: 'ü™Ç', isNew: true },
    { title: '„Çµ„Ç§„Éê„ÉºËã±Ë™ûÔºö„Éç„Ç™„É≥„ÅÆÂ≠¶Áøí', category: 'quiz learning', keywords: 'Ëã±Ë™û Â≠¶Áøí „Çµ„Ç§„Éê„Éº ‰∏≠Â≠¶', url: 'https://titan11111.github.io/18-eigo2/', icon: 'üåê' },
    { title: 'ÈõªËÑ≥„Ç¢„ÇØ„Ç∑„Éß„É≥Ôºö„Éá„Ç∏„Çø„É´„Ç¶„Ç©„Éº„Ç∫', category: 'action', keywords: 'ÈõªËÑ≥ „Çµ„Ç§„Éê„Éº „Ç¢„ÇØ„Ç∑„Éß„É≥ SF', url: 'https://titan11111.github.io/17-action/', icon: 'üöÄ' },
    { title: '„É≠„Éú„ÉÉ„Éà„É©„É≥„Éä„ÉºÔºö„É°„Ç´„ÉÄ„ÉÉ„Ç∑„É•', category: 'action', keywords: '„É≠„Éú„ÉÉ„Éà „É©„É≥„Éä„Éº Ëµ∞„Çã', url: 'https://titan11111.github.io/16-nigeru/', icon: 'ü§ñ' },
    { title: '„Çª„É´„Éï„Éà„Éº„ÇØÔºö„Ç≥„Ç≥„É≠„Å®ÂØæË©±', category: 'adventure', keywords: '„Çª„É´„Éï„Éà„Éº„ÇØ ÂØæË©± ÂøÉ', url: 'https://titan11111.github.io/15-selftalk/', icon: 'üí≠' },
    { title: '„Éâ„Ç≠„Éâ„Ç≠Ë®∫Êñ≠Ôºö„Éè„Éº„Éà„ÉÅ„Çß„ÉÉ„ÇØ', category: 'quiz', keywords: 'Ë®∫Êñ≠ „Éâ„Ç≠„Éâ„Ç≠ ÂøÉÁêÜ', url: 'https://titan11111.github.io/14-dokidoki/', icon: 'üíñ' },
    { title: 'Ê≠¥Âè≤„Çπ„Éà„Éº„É™„ÉºÔºöÊôÇÁ©∫„ÅÆÊóÖ', category: 'quiz learning', keywords: 'Ê≠¥Âè≤ ÂãâÂº∑ „Çπ„Éà„Éº„É™„Éº', url: 'https://titan11111.github.io/13-histry/', icon: 'üìö' },
    { title: 'ÂïÜÂ£≤‰ΩìÈ®ìÔºö„Éû„Éº„Ç±„ÉÉ„Éà„Éû„Çπ„Çø„Éº', category: 'adventure', keywords: 'ÂïÜÂ£≤ Â£≤Ë≤∑ ‰ΩìÈ®ì „Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥', url: 'https://titan11111.github.io/12-buysell_game/', icon: 'üí∞' },
    { title: 'Ë≤∑„ÅÑÁâ©„Ç≤„Éº„É†Ôºö„Ç∑„Éß„ÉÉ„Éó„ÉÅ„É£„É¨„É≥„Ç∏', category: 'adventure', keywords: 'Ë≤∑„ÅÑÁâ© „Ç∑„Éß„ÉÉ„Éî„É≥„Ç∞ „ÅäÈáë', url: 'https://titan11111.github.io/11-kaimono_game/', icon: 'üõí' },
    { title: 'ÈÅ∏Êäû„ÇØ„Ç§„Ç∫ÔºöÊ≠£Ëß£„ÇíÈÅ∏„Åπ', category: 'quiz', keywords: 'ÈÅ∏Êäû „ÇØ„Ç§„Ç∫ ÂïèÈ°å', url: 'https://titan11111.github.io/10-senntaku_game/', icon: '‚ùì' },
    { title: '„Éê„Éà„É´„Ç≤„Éº„É†2Ôºö„Éï„Ç°„Ç§„Éä„É´„Éá„É•„Ç®„É´', category: 'battle', keywords: '„Éê„Éà„É´ Êà¶Èóò Êà¶„ÅÑ 2', url: 'https://titan11111.github.io/9-battle2-game/', icon: '‚öîÔ∏è', isNew: true },
    { title: 'ÈÖ∏„Ç¢„É´„Éê„Éà„É´ÔºöÁßëÂ≠¶„Éê„Éà„É´', category: 'battle learning', keywords: 'ÈÖ∏ „Ç¢„É´„Ç´„É™ ÂåñÂ≠¶ „Éê„Éà„É´', url: 'https://titan11111.github.io/8-sannaru_game/', icon: '‚öóÔ∏è' },
    { title: 'Ëâ≤ËÇ≤ÊàêÔºö„Ç´„É©„Éº„ÉØ„Éº„É´„Éâ', category: 'adventure', keywords: 'Ëâ≤ ËÇ≤Êàê „Ç´„É©„Éº', url: 'https://titan11111.github.io/7-iro_game/', icon: 'üåà' },
    { title: 'Ëã±Ë™û„Ç≤„Éº„É†Ôºö„ÉØ„Éº„Éâ„ÇØ„Ç®„Çπ„Éà', category: 'quiz learning', keywords: 'Ëã±Ë™û Â≠¶Áøí', url: 'https://titan11111.github.io/6-eigo-game/', icon: 'üìò' },
    { title: 'Ëø∑Ë∑Ø„ÇØ„Ç§„Ç∫Ôºö„É©„Éì„É™„É≥„Çπ„ÉÅ„É£„É¨„É≥„Ç∏', category: 'adventure quiz', keywords: 'Ëø∑Ë∑Ø „ÇØ„Ç§„Ç∫ RPG ÂÜíÈô∫', url: 'https://titan11111.github.io/5-meiro_game/', icon: 'üó∫Ô∏è' },
    { title: '„Éê„Éà„É´„Ç≤„Éº„É†Ôºö„ÇΩ„Éº„Éâ„Ç¢„É™„Éº„Éä', category: 'battle', keywords: '„Éê„Éà„É´ Êà¶Èóò Êà¶„ÅÑ', url: 'https://titan11111.github.io/4-battle-game/', icon: '‚öîÔ∏è' },
    { title: '„ÅÇ„Åø„Å†„Åè„ÅòÔºö„É©„ÉÉ„Ç≠„Éº„Éë„Çπ', category: 'adventure', keywords: '„ÅÇ„Åø„Å† „Åè„Åò ÈÅã ÈÅ∏Êäû', url: 'https://titan11111.github.io/3-amida-game/', icon: 'üéØ' },
    { title: 'ÂåñÂêàÁâ©„ÇØ„Ç§„Ç∫Ôºö„Çµ„Ç§„Ç®„É≥„Çπ„Éî„Éº„Çπ', category: 'quiz learning', keywords: 'ÂåñÂêàÁâ© ÁßëÂ≠¶ ÁêÜÁßë „ÇØ„Ç§„Ç∫', url: 'https://titan11111.github.io/2-kagoubutu_game/', icon: 'üß™' },
    { title: '„Å≠„Åì„Ç≠„É£„ÉÉ„ÉÅÔºö„Åô„Å∞„ÇÑ„ÅèÊçï„Åæ„Åà„Çà„ÅÜ', category: 'action', keywords: '„Å≠„Åì Áå´ „Ç≠„É£„ÉÉ„ÉÅ ÂãïÁâ©', url: 'https://titan11111.github.io/1-neko_catch_game/', icon: 'üê±' }
];

// „Ç´„ÉÜ„Ç¥„É™„ÉºÊÉÖÂ†±
const categories = {
    all: { name: '„Åô„Åπ„Å¶', icon: 'üéÆ' },
    action: { name: '„Ç¢„ÇØ„Ç∑„Éß„É≥', icon: '‚ö°' },
    adventure: { name: '„Ç¢„Éâ„Éô„É≥„ÉÅ„É£„Éº', icon: 'üó∫Ô∏è' },
    battle: { name: '„Éê„Éà„É´', icon: '‚öîÔ∏è' },
    quiz: { name: '„ÇØ„Ç§„Ç∫', icon: '‚ùì' },
    learning: { name: 'Â≠¶Áøí', icon: 'üìö' }
};

// „É¶„Éº„Ç∂„Éº„Éá„Éº„ÇøÔºà„É°„É¢„É™„Å´‰øùÂ≠òÔºâ
let userData = {
    favorites: [],
    playHistory: [],
    playCount: {},
    achievements: [],
    totalPlays: 0,
    level: 1,
    exploredCategories: new Set()
};

// ÂÆüÁ∏æ„Éá„Éº„Çø
const achievements = [
    { id: 'first_game', title: 'üéÆ „ÅØ„Åò„ÇÅ„ÅÆ‰∏ÄÊ≠©', desc: 'ÊúÄÂàù„ÅÆ„Ç≤„Éº„É†„Çí„Éó„É¨„Ç§„Åó„Åæ„Åó„ÅüÔºÅ', condition: (data) => data.totalPlays >= 1 },
    { id: 'game_lover', title: 'üíñ „Ç≤„Éº„É†Â•Ω„Åç', desc: '5„Å§„ÅÆ„Ç≤„Éº„É†„Çí„Éó„É¨„Ç§„Åó„Åæ„Åó„ÅüÔºÅ', condition: (data) => data.totalPlays >= 5 },
    { id: 'explorer', title: 'üó∫Ô∏è ÂÜíÈô∫ËÄÖ', desc: '3„Å§‰ª•‰∏ä„ÅÆ„Ç∏„É£„É≥„É´„ÇíÊé¢Ê§ú„Åó„Åæ„Åó„ÅüÔºÅ', condition: (data) => data.exploredCategories.size >= 3 },
    { id: 'collector', title: '‚≠ê „Ç≥„É¨„ÇØ„Çø„Éº', desc: '5„Å§„ÅÆ„ÅäÊ∞ó„Å´ÂÖ•„Çä„ÇíÈõÜ„ÇÅ„Åæ„Åó„ÅüÔºÅ', condition: (data) => data.favorites.length >= 5 },
    { id: 'master', title: 'üëë „Ç≤„Éº„É†„Éû„Çπ„Çø„Éº', desc: '15ÂÄã„ÅÆ„Ç≤„Éº„É†„Çí„Éó„É¨„Ç§„Åó„Åæ„Åó„ÅüÔºÅ', condition: (data) => data.totalPlays >= 15 },
    { id: 'new_game_hunter', title: 'üÜï Êñ∞„Ç≤„Éº„É†„Éè„É≥„Çø„Éº', desc: 'Êñ∞‰Ωú„Ç≤„Éº„É†„Çí„Éó„É¨„Ç§„Åó„Åæ„Åó„ÅüÔºÅ', condition: (data) => data.playHistory.some(url => gameData.find(g => g.url === url && g.isNew)) }
];

// „Ç≤„Éº„É†„ÇíÈñã„ÅèÈñ¢Êï∞ÔºàÊîπËâØÁâàÔºâ
function playGame(gameUrl) {
    playClickSound();
    
    // „Éú„Çø„É≥„ÅÆ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÂäπÊûú
    const clickedButton = document.querySelector(`[data-url="${gameUrl}"]`);
    if (clickedButton) {
        clickedButton.style.transform = 'scale(0.95)';
        clickedButton.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';
        
        setTimeout(() => {
            clickedButton.style.transform = '';
            clickedButton.style.boxShadow = '';
        }, 150);
    }
    
    // Áµ±Ë®à„ÇíÊõ¥Êñ∞
    updateUserData(gameUrl);
    
    // ÂÆüÁ∏æ„ÉÅ„Çß„ÉÉ„ÇØ
    checkAchievements();
    
    // Â∞ë„ÅóÈÅÖÂª∂„Åó„Å¶„Åã„Çâ„Éö„Éº„Ç∏„ÇíÈñã„Åè
    setTimeout(() => {
        window.open(gameUrl, '_blank');
    }, 200);
}

// „É¶„Éº„Ç∂„Éº„Éá„Éº„ÇøÊõ¥Êñ∞
function updateUserData(gameUrl) {
    // „Éó„É¨„Ç§Â±•Ê≠¥„Å´ËøΩÂä†
    userData.playHistory.unshift(gameUrl);
    if (userData.playHistory.length > 10) {
        userData.playHistory = userData.playHistory.slice(0, 10);
    }
    
    // „Éó„É¨„Ç§ÂõûÊï∞Êõ¥Êñ∞
    userData.totalPlays++;
    if (!userData.playCount[gameUrl]) {
        userData.playCount[gameUrl] = 0;
    }
    userData.playCount[gameUrl]++;
    
    // „Ç´„ÉÜ„Ç¥„É™„ÉºÊé¢Ê§úË®òÈå≤
    const game = gameData.find(g => g.url === gameUrl);
    if (game) {
        game.category.split(' ').forEach(cat => {
            userData.exploredCategories.add(cat);
        });
    }
    
    // „É¨„Éô„É´Ë®àÁÆó
    userData.level = Math.floor(userData.totalPlays / 5) + 1;
    
    // Áµ±Ë®àË°®Á§∫„ÇíÊõ¥Êñ∞
    updateStatsDisplay();
    updateRecentGames();
    
    // „Éá„Éº„Çø‰øùÂ≠ò
    saveUserData();
}

// „ÅäÊ∞ó„Å´ÂÖ•„ÇäÊ©üËÉΩ
function toggleFavorite(gameUrl, event) {
    event.stopPropagation();
    playClickSound();
    
    const index = userData.favorites.indexOf(gameUrl);
    const button = event.target;
    
    if (index === -1) {
        // „ÅäÊ∞ó„Å´ÂÖ•„Çä„Å´ËøΩÂä†
        userData.favorites.push(gameUrl);
        button.classList.add('active');
        button.textContent = '‚ù§Ô∏è';
        
        // „Ç®„Éï„Çß„ÇØ„Éà
        button.style.animation = 'heartbeat 0.6s ease';
        setTimeout(() => button.style.animation = '', 600);
        
        // ÂÆüÁ∏æ„ÉÅ„Çß„ÉÉ„ÇØ
        checkAchievements();
    } else {
        // „ÅäÊ∞ó„Å´ÂÖ•„Çä„Åã„ÇâÂâäÈô§
        userData.favorites.splice(index, 1);
        button.classList.remove('active');
        button.textContent = 'ü§ç';
    }
    
    saveUserData();
    updateStatsDisplay();
}

// ÂÆüÁ∏æ„ÉÅ„Çß„ÉÉ„ÇØ
function checkAchievements() {
    achievements.forEach(achievement => {
        if (!userData.achievements.includes(achievement.id) && achievement.condition(userData)) {
            userData.achievements.push(achievement.id);
            showAchievement(achievement.title, achievement.desc);
        }
    });
}

// ÂÆüÁ∏æË°®Á§∫
function showAchievement(title, desc) {
    const achievementDiv = document.createElement('div');
    achievementDiv.className = 'achievement';
    achievementDiv.innerHTML = `
        <div class="achievement-title">${title}</div>
        <div class="achievement-desc">${desc}</div>
    `;
    
    document.getElementById('achievements').appendChild(achievementDiv);
    
    // ÂäπÊûúÈü≥
    playAchievementSound();
    
    // 5ÁßíÂæå„Å´ÂâäÈô§
    setTimeout(() => {
        achievementDiv.style.animation = 'slideOutAchievement 0.5s ease forwards';
        setTimeout(() => achievementDiv.remove(), 500);
    }, 5000);
}

// ÂÆüÁ∏æÈü≥
function playAchievementSound() {
    try {
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        
        // „Çà„ÇäË±™ËèØ„Å™ÂÆüÁ∏æÈü≥
        const frequencies = [523, 659, 784, 1047]; // C5, E5, G5, C6
        
        frequencies.forEach((freq, index) => {
            setTimeout(() => {
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);
                
                oscillator.frequency.setValueAtTime(freq, audioContext.currentTime);
                gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 0.3);
                
                oscillator.type = 'triangle';
                oscillator.start(audioContext.currentTime);
                oscillator.stop(audioContext.currentTime + 0.3);
            }, index * 100);
        });
    } catch (error) {
        console.log('ÂÆüÁ∏æÈü≥„ÇíÂÜçÁîü„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü:', error);
    }
}

// „ÇØ„É™„ÉÉ„ÇØÈü≥„ÇíÂÜçÁîü„Åô„ÇãÈñ¢Êï∞ÔºàÊîπËâØÁâàÔºâ
function playClickSound() {
    try {
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        // „Çà„ÇäÂøÉÂú∞„Çà„ÅÑÈü≥„Å´Ë™øÊï¥
        oscillator.frequency.setValueAtTime(600, audioContext.currentTime);
        oscillator.frequency.exponentialRampToValueAtTime(300, audioContext.currentTime + 0.15);
        
        gainNode.gain.setValueAtTime(0.05, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 0.15);
        
        oscillator.type = 'triangle'; // „Çà„ÇäÊüî„Çâ„Åã„ÅÑÈü≥
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.15);
    } catch (error) {
        console.log('„ÇØ„É™„ÉÉ„ÇØÈü≥„ÇíÂÜçÁîü„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü:', error);
    }
}

// „Ç≤„Éº„É†„Éú„Çø„É≥„ÇíÂãïÁöÑ„Å´ÁîüÊàê„Åô„ÇãÈñ¢Êï∞ÔºàÊîπËâØÁâàÔºâ
function createGameButtons() {
    const gamesGrid = document.getElementById('gamesGrid');
    gamesGrid.innerHTML = '';
    
    let sortedGames = [...gameData];
    const sortValue = document.getElementById('sortSelect')?.value || 'default';
    
    // „ÇΩ„Éº„ÉàÂá¶ÁêÜ
    switch(sortValue) {
        case 'popular':
            sortedGames.sort((a, b) => (userData.playCount[b.url] || 0) - (userData.playCount[a.url] || 0));
            break;
        case 'recent':
            sortedGames.sort((a, b) => {
                const aIndex = userData.playHistory.indexOf(a.url);
                const bIndex = userData.playHistory.indexOf(b.url);
                if (aIndex === -1 && bIndex === -1) return 0;
                if (aIndex === -1) return 1;
                if (bIndex === -1) return -1;
                return aIndex - bIndex;
            });
            break;
        case 'favorites':
            sortedGames.sort((a, b) => {
                const aFav = userData.favorites.includes(a.url);
                const bFav = userData.favorites.includes(b.url);
                if (aFav && !bFav) return -1;
                if (!aFav && bFav) return 1;
                return 0;
            });
            break;
        case 'alphabetical':
            sortedGames.sort((a, b) => a.title.localeCompare(b.title, 'ja'));
            break;
    }
    
    sortedGames.forEach((game, index) => {
        const button = document.createElement('button');
        button.className = 'game-button';
        button.setAttribute('data-url', game.url);
        button.setAttribute('data-category', game.category);
        button.setAttribute('data-keywords', game.keywords);
        button.setAttribute('tabindex', '0');
        
        // ‰∫∫Ê∞óÂ∫¶Ë®àÁÆó
        const playCount = userData.playCount[game.url] || 0;
        const isPopular = playCount >= 3;
        const isFavorite = userData.favorites.includes(game.url);
        
        // „Éú„Çø„É≥„ÅÆÂÜÖÂÆπ„ÇíË®≠ÂÆö
        button.innerHTML = `
            <button class="favorite-btn ${isFavorite ? 'active' : ''}" onclick="toggleFavorite('${game.url}', event)">
                ${isFavorite ? '‚ù§Ô∏è' : 'ü§ç'}
            </button>
            
            ${game.isNew ? '<span class="new-badge">NEW</span>' : ''}
            ${isPopular ? '<span class="popular-badge">üî• ‰∫∫Ê∞ó</span>' : ''}
            
            <span class="game-icon">${game.icon}</span>
            <span class="game-title">${game.title}</span>
            <span class="game-desc">${generateDescription(game)}</span>
            
            <div class="rating-stars">
                ${generateStars(calculateRating(game))}
            </div>
            
            ${playCount > 0 ? `<div class="play-count">„Éó„É¨„Ç§ÂõûÊï∞: ${playCount}</div>` : ''}
        `;
        
        // „ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„Éà„ÇíËøΩÂä†
        button.addEventListener('click', (e) => {
            if (!e.target.classList.contains('favorite-btn')) {
                playGame(game.url);
            }
        });
        
        // „Ç≠„Éº„Éú„Éº„Éâ„Çµ„Éù„Éº„Éà
        button.addEventListener('keydown', (event) => {
            if (event.key === 'Enter' || event.key === ' ') {
                event.preventDefault();
                playGame(game.url);
            }
        });
        
        gamesGrid.appendChild(button);
    });
}

// ÊòüË©ï‰æ°ÁîüÊàê
function generateStars(rating) {
    let stars = '';
    for (let i = 1; i <= 5; i++) {
        stars += `<span class="star ${i <= rating ? 'filled' : ''}">‚≠ê</span>`;
    }
    return stars;
}

// Ë©ï‰æ°Ë®àÁÆó
function calculateRating(game) {
    const playCount = userData.playCount[game.url] || 0;
    const isFavorite = userData.favorites.includes(game.url);
    const isNew = game.isNew;
    
    let rating = 3; // Âü∫Êú¨Ë©ï‰æ°
    
    if (playCount >= 5) rating = 5;
    else if (playCount >= 3) rating = 4;
    else if (playCount >= 1) rating = 3;
    
    if (isFavorite) rating = Math.max(rating, 4);
    if (isNew) rating = Math.max(rating, 4);
    
    return rating;
}

// „Ç≤„Éº„É†„ÅÆË™¨ÊòéÊñá„ÇíÁîüÊàê„Åô„ÇãÈñ¢Êï∞ÔºàÊîπËâØÁâàÔºâ
function generateDescription(game) {
    const descriptions = {
        'Ê†ºÈóò„ÉÅ„É£„É≥„Éî„Ç™„É≥': 'Êã≥„ÅßÈ†ÇÁÇπ„ÇíÁõÆÊåá„Åõ',
        '„Éõ„É©„ÉºËÑ±Âá∫': 'ÊÅêÊÄñ„ÅÆÈ§®„Åã„ÇâËÑ±Âá∫„Åõ„Çà',
        '„Ç∑„É•„Éº„ÉÜ„Ç£„É≥„Ç∞3ÔºöÊòüÊµ∑„ÅÆÂ§ßÊ±∫Êà¶': 'ÂÆáÂÆô„ÇíÈßÜ„ÅëÊïµËâ¶„ÇíÊíÉÁ†¥',
        'ÂÜíÈô∫RPGÔºö‰ºùË™¨„ÅÆÂßã„Åæ„Çä': 'ÂãáËÄÖ„Å®„Å™„Å£„Å¶‰∏ñÁïå„ÇíÊïë„Åä„ÅÜ',
        'Â≠¶Âúí„Ç¢„Éâ„Éô„É≥„ÉÅ„É£„ÉºÔºö„Å≤„Åø„Å§„ÅÆÊîæË™≤Âæå': 'Â≠¶Ê†°„ÅÆË¨é„ÇíËß£„ÅçÊòé„Åã„Åù„ÅÜ',
        '„Éá„É¢„É≥„Ç≠„É£„ÉÉ„Çπ„É´ÔºöÈ≠îÂüé„ÅÆË©¶Á∑¥': 'È≠îÁâ©„ÅÇ„Åµ„Çå„ÇãÂüé„ÇíÊîªÁï•',
        '„Å≠„Åè„Å≥ÔºöÂ§¢„Åø„ÇãÊóÖ‰∫∫': 'Áú†„Çä„ÅÆ‰∏ñÁïå„ÅßÂÜíÈô∫',
        '„Ç∑„É•„Éº„ÉÜ„Ç£„É≥„Ç∞2ÔºöÁÇé„ÅÆÈÄÜË•≤': 'Ëø´ÂäõÊ∫ÄÁÇπ„ÅÆÁ∂öÁ∑®',
        '„Ç∑„É•„Éº„ÉÜ„Ç£„É≥„Ç∞1ÔºöÂàù„ÇÅ„Å¶„ÅÆÊà¶Â†¥': 'Áãô„Å£„Å¶ÊíÉ„Å§Âü∫Êú¨Á∑®',
        '‰∏ñÁïåÊ®πÊé¢Ê§úÔºö‰ºùË™¨„ÅÆÊ®π„ÇíÊ±Ç„ÇÅ„Å¶': 'Á•ûÁßò„ÅÆ‰∏ñÁïåÊ®π„ÇíÂÜíÈô∫',
        '„ÇØ„Ç§„Ç∫4ÔºöË∂ÖÈõ£Âïè„ÉÅ„É£„É¨„É≥„Ç∏': 'È†≠„Çí„Éï„É´ÂõûËª¢„Åï„Åõ„Çà„ÅÜ',
        '„ÇØ„Ç§„Ç∫3Ôºö„Å≤„Çâ„ÇÅ„ÅçÂãùË≤†': 'Áü•ÊÅµ„ÇíË©¶„ÅôÁ¨¨3Âºæ',
        'Ëø∑„ÅÑ„ÅÆÊ£ÆÔºö„Åï„Åï„ÇÑ„ÅèÊú®„ÄÖ„ÅÆË™ò„ÅÑ': '‰∏çÊÄùË≠∞„Å™Ê£Æ„ÇíÊé¢Á¥¢',
        'Âùä‰∏ª„ÇÅ„Åè„ÇäÔºöÈÅãË©¶„Åó„Éê„Éà„É´': '‰ºùÁµ±„ÅÆÂãùË≤†„ÅßÁõõ„Çä‰∏ä„Åå„Çç„ÅÜ',
        'Âπ≥Âíå„Å™‰∏ñÁïåÔºöÁôí„Åó„ÅÆ„Ç™„Ç¢„Ç∑„Çπ': '„ÅÆ„Çì„Å≥„ÇäÂøÉ„Çí‰ºë„ÇÅ„Çà„ÅÜ',
        '„Å≠„Åì„Å≠„Åì„Å≠„ÅìÔºö„Å´„ÇÉ„Çì„Åì„Éë„É¨„Éº„Éâ': 'Áå´„Å†„Çâ„Åë„ÅßÁôí„Åï„Çå„Çã',
        'Áµ¶È£üÂΩìÁï™„É™„Ç∫„É†Ôºö„Ç≠„ÉÉ„ÉÅ„É≥„Éì„Éº„Éà': '„É™„Ç∫„É†„Å´‰πó„Å£„Å¶ÈÖçËÜ≥',
        '„Åä„Åï„Çì„ÅΩÊó•ÂíåÔºö„Å¶„Åè„Å¶„ÅèÂÜíÈô∫': '„ÅÆ„Çì„Å≥„ÇäÊï£Ê≠©„ÅßÁôí„Åó',
        'ÂØæÁß∞„Éë„Ç∫„É´Ôºö„Éü„É©„Éº„ÅÆÈ≠îÊ≥ï': 'Áæé„Åó„ÅÑÂ∑¶Âè≥ÂØæÁß∞„Çí‰Ωú„Çç„ÅÜ',
        '„Çâ„Å£„ÅãÔºö„Çπ„Ç´„Ç§„Éâ„É≠„ÉÉ„Éó': '„Çø„Ç§„Éü„É≥„Ç∞„Çà„ÅèËêΩ‰∏ã',
        '„Çµ„Ç§„Éê„ÉºËã±Ë™ûÔºö„Éç„Ç™„É≥„ÅÆÂ≠¶Áøí': '„Çµ„Ç§„Éê„Éº‰∏ñÁïå„ÅßËã±Ë™û',
        'ÈõªËÑ≥„Ç¢„ÇØ„Ç∑„Éß„É≥Ôºö„Éá„Ç∏„Çø„É´„Ç¶„Ç©„Éº„Ç∫': 'ÈõªËÑ≥‰∏ñÁïå„ÅßÊà¶„ÅÑÊäú„Åë',
        '„É≠„Éú„ÉÉ„Éà„É©„É≥„Éä„ÉºÔºö„É°„Ç´„ÉÄ„ÉÉ„Ç∑„É•': 'Ëµ∞„Çã„É≠„Éú„ÇíÊìç‰Ωú',
        '„Çª„É´„Éï„Éà„Éº„ÇØÔºö„Ç≥„Ç≥„É≠„Å®ÂØæË©±': 'Ëá™ÂàÜ„Å®„ÅÆ‰ºöË©±„ÅßÂøÉ„ÇíÁü•„Çã',
        '„Éâ„Ç≠„Éâ„Ç≠Ë®∫Êñ≠Ôºö„Éè„Éº„Éà„ÉÅ„Çß„ÉÉ„ÇØ': 'Ë≥™Âïè„ÅßÊÄßÊ†ºË®∫Êñ≠',
        'Ê≠¥Âè≤„Çπ„Éà„Éº„É™„ÉºÔºöÊôÇÁ©∫„ÅÆÊóÖ': 'Áâ©Ë™û„ÅßÊ≠¥Âè≤„ÇíÂ≠¶„Åº„ÅÜ',
        'ÂïÜÂ£≤‰ΩìÈ®ìÔºö„Éû„Éº„Ç±„ÉÉ„Éà„Éû„Çπ„Çø„Éº': 'Â£≤Ë≤∑„ÅßÂïÜÂ£≤„Çí‰ΩìÈ®ì',
        'Ë≤∑„ÅÑÁâ©„Ç≤„Éº„É†Ôºö„Ç∑„Éß„ÉÉ„Éó„ÉÅ„É£„É¨„É≥„Ç∏': 'Ë≥¢„Åè„ÅäË≤∑„ÅÑÁâ©„Åó„Çà„ÅÜ',
        'ÈÅ∏Êäû„ÇØ„Ç§„Ç∫ÔºöÊ≠£Ëß£„ÇíÈÅ∏„Åπ': '„Å≤„Çâ„ÇÅ„Åç„ÅßÁ≠î„Åà„ÇíÈÅ∏Êäû',
        '„Éê„Éà„É´„Ç≤„Éº„É†2Ôºö„Éï„Ç°„Ç§„Éä„É´„Éá„É•„Ç®„É´': 'ÁÜ±„ÅÑÊà¶„ÅÑ„ÅÆÁ∂öÁ∑®',
        'ÈÖ∏„Ç¢„É´„Éê„Éà„É´ÔºöÁßëÂ≠¶„Éê„Éà„É´': 'ÈÖ∏„Å®„Ç¢„É´„Ç´„É™„ÅÆÂØæÊ±∫',
        'Ëâ≤ËÇ≤ÊàêÔºö„Ç´„É©„Éº„ÉØ„Éº„É´„Éâ': 'Ëâ≤„ÇíËÇ≤„Å¶„Å¶Ê•Ω„Åó„ÇÇ„ÅÜ',
        'Ëã±Ë™û„Ç≤„Éº„É†Ôºö„ÉØ„Éº„Éâ„ÇØ„Ç®„Çπ„Éà': 'ÈÅä„Å≥„Å™„Åå„ÇâËã±Ë™ûÂ≠¶Áøí',
        'Ëø∑Ë∑Ø„ÇØ„Ç§„Ç∫Ôºö„É©„Éì„É™„É≥„Çπ„ÉÅ„É£„É¨„É≥„Ç∏': 'Ëø∑Ë∑Ø„Åß„ÇØ„Ç§„Ç∫„Å´ÊåëÊà¶',
        '„Éê„Éà„É´„Ç≤„Éº„É†Ôºö„ÇΩ„Éº„Éâ„Ç¢„É™„Éº„Éä': 'Êïµ„Å®Êà¶„ÅÜÁéãÈÅì„Éê„Éà„É´',
        '„ÅÇ„Åø„Å†„Åè„ÅòÔºö„É©„ÉÉ„Ç≠„Éº„Éë„Çπ': 'ÈÅãË©¶„Åó„Å´ÊåëÊà¶',
        'ÂåñÂêàÁâ©„ÇØ„Ç§„Ç∫Ôºö„Çµ„Ç§„Ç®„É≥„Çπ„Éî„Éº„Çπ': 'ÂåñÂ≠¶Âºè„ÇíÂΩì„Å¶„Çà„ÅÜ',
        '„Å≠„Åì„Ç≠„É£„ÉÉ„ÉÅÔºö„Åô„Å∞„ÇÑ„ÅèÊçï„Åæ„Åà„Çà„ÅÜ': 'Á¥†Êó©„ÅèÁå´„ÇíÊçï„Åæ„Åà„Çã'
    };

    return descriptions[game.title] || 'Ê•Ω„Åó„ÅÑ„Ç≤„Éº„É†„Çí‰ΩìÈ®ì„Åó„Çà„ÅÜÔºÅ';
}

// „Éï„Ç£„É´„Çø„É™„É≥„Ç∞Áî®„ÅÆÈñ¢Êï∞„Çí„Ç∞„É≠„Éº„Éê„É´„Å´ÂÖ¨Èñã
window.filterGames = filterGames;

// Ê§úÁ¥¢Ê©üËÉΩÔºàÊîπËâØÁâàÔºâ
function setupSearch() {
    const searchInput = document.getElementById('searchInput');
    const searchClear = document.getElementById('searchClear');
    
    // „É™„Ç¢„É´„Çø„Ç§„É†Ê§úÁ¥¢
    searchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase().trim();
        
        // „ÇØ„É™„Ç¢„Éú„Çø„É≥„ÅÆË°®Á§∫/ÈùûË°®Á§∫
        searchClear.style.display = searchTerm ? 'flex' : 'none';
        
        // Ê§úÁ¥¢ÂÆüË°å
        filterGames();
    });
    
    // „ÇØ„É™„Ç¢„Éú„Çø„É≥„ÅÆÂãï‰Ωú
    searchClear.addEventListener('click', function() {
        searchInput.value = '';
        searchClear.style.display = 'none';
        filterGames();
        searchInput.focus();
        playClickSound();
    });
    
    // Enter„Ç≠„Éº„ÅßÊúÄÂàù„ÅÆ„Ç≤„Éº„É†„ÇíÈñã„Åè
    searchInput.addEventListener('keydown', function(event) {
        if (event.key === 'Enter') {
            const firstVisibleButton = document.querySelector('.game-button:not(.hidden)');
            if (firstVisibleButton) {
                const gameUrl = firstVisibleButton.getAttribute('data-url');
                playGame(gameUrl);
            }
        }
    });
}

// „Ç´„ÉÜ„Ç¥„É™„Éï„Ç£„É´„Çø„ÉºÊ©üËÉΩÔºàÊîπËâØÁâàÔºâ
function setupCategoryFilter() {
    const categoryContainer = document.querySelector('.category-filter');
    categoryContainer.innerHTML = '';
    
    // „Ç´„ÉÜ„Ç¥„É™„Éú„Çø„É≥„ÇíÂãïÁöÑ„Å´ÁîüÊàê
    Object.keys(categories).forEach(categoryKey => {
        const btn = document.createElement('button');
        btn.className = 'category-btn';
        btn.setAttribute('data-category', categoryKey);
        btn.innerHTML = `${categories[categoryKey].icon} ${categories[categoryKey].name}`;
        
        if (categoryKey === 'all') {
            btn.classList.add('active');
        }
        
        btn.addEventListener('click', function() {
            // „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„ÇØ„É©„Çπ„ÅÆÂàá„ÇäÊõø„Åà
            document.querySelectorAll('.category-btn').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            
            filterGames();
            playClickSound();
        });
        
        categoryContainer.appendChild(btn);
    });
}

// „ÇΩ„Éº„ÉàÊ©üËÉΩ
function setupSortFunction() {
    const sortSelect = document.getElementById('sortSelect');
    sortSelect.addEventListener('change', function() {
        playClickSound();
        createGameButtons();
        filterGames();
    });
}

// „Ç≤„Éº„É†„ÅÆ„Éï„Ç£„É´„Çø„É™„É≥„Ç∞ÔºàÊîπËâØÁâàÔºâ
function filterGames() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase().trim();
    const activeCategory = document.querySelector('.category-btn.active').dataset.category;
    const gameButtons = document.querySelectorAll('.game-button');
    const noResults = document.getElementById('noResults');
    
    let visibleCount = 0;
    
    gameButtons.forEach((button) => {
        const gameUrl = button.getAttribute('data-url');
        const gameDataItem = gameData.find(game => game.url === gameUrl);

        if (!gameDataItem) {
            button.classList.add('hidden');
            return;
        }

        const gameTitle = gameDataItem.title.toLowerCase();
        const gameKeywords = gameDataItem.keywords.toLowerCase();
        const gameCategory = gameDataItem.category;
        
        // Ê§úÁ¥¢Êù°‰ª∂
        const matchesSearch = !searchTerm || 
            gameTitle.includes(searchTerm) || 
            gameKeywords.includes(searchTerm);
        
        // „Ç´„ÉÜ„Ç¥„É™Êù°‰ª∂
        const matchesCategory = activeCategory === 'all' || 
            gameCategory.includes(activeCategory);
        
        if (matchesSearch && matchesCategory) {
            button.classList.remove('hidden');
            visibleCount++;
            
            // „Ç´„ÉÜ„Ç¥„É™„ÅåÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„ÇãÊôÇ„ÅÆ„Éè„Ç§„É©„Ç§„ÉàÂäπÊûú
            if (activeCategory !== 'all') {
                button.classList.add('category-highlighted');
            } else {
                button.classList.remove('category-highlighted');
            }
        } else {
            button.classList.add('hidden');
            button.classList.remove('category-highlighted');
        }
    });
    
    // ÁµêÊûú„ÅÆË°®Á§∫
    if (visibleCount === 0) {
        noResults.style.display = 'block';
    } else {
        noResults.style.display = 'none';
    }
    
    // „Ç≤„Éº„É†Êï∞„ÅÆË°®Á§∫„ÇíÊîπËâØ
    const gameCountElement = document.getElementById('gameCount');
    if (activeCategory === 'all') {
        gameCountElement.innerHTML = `<span id="gameCountNumber">${visibleCount}</span> ÂÄã„ÅÆ„Ç≤„Éº„É†„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü`;
    } else {
        const categoryName = categories[activeCategory].name;
        const categoryIcon = categories[activeCategory].icon;
        gameCountElement.innerHTML = `${categoryIcon} <strong>${categoryName}</strong>„Ç≤„Éº„É†: <span id="gameCountNumber">${visibleCount}</span> ÂÄãË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü`;
    }
    
    // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÂäπÊûú
    animateVisibleButtons();
}

// Áµ±Ë®àË°®Á§∫Êõ¥Êñ∞
function updateStatsDisplay() {
    document.getElementById('totalPlaysCount').textContent = userData.totalPlays;
    document.getElementById('favoritesCount').textContent = userData.favorites.length;
    document.getElementById('exploredCategories').textContent = userData.exploredCategories.size;
    
    // „É¨„Éô„É´Ë°®Á§∫
    const levelNames = ['ÂàùÂøÉËÄÖ', 'Êñ∞Á±≥ÂÜíÈô∫ËÄÖ', 'ÂÜíÈô∫ËÄÖ', 'ÁÜüÁ∑¥ËÄÖ', '„Ç®„Ç≠„Çπ„Éë„Éº„Éà', '„Éû„Çπ„Çø„Éº', '„É¨„Ç∏„Çß„É≥„Éâ'];
    const levelIndex = Math.min(userData.level - 1, levelNames.length - 1);
    document.getElementById('playerLevel').textContent = `${levelNames[levelIndex]} (Lv.${userData.level})`;
}

// ÊúÄËøë„Éó„É¨„Ç§„Åó„Åü„Ç≤„Éº„É†Ë°®Á§∫
function updateRecentGames() {
    const recentSection = document.getElementById('recentSection');
    const recentGames = document.getElementById('recentGames');
    
    if (userData.playHistory.length === 0) {
        recentSection.style.display = 'none';
        return;
    }
    
    recentSection.style.display = 'block';
    recentGames.innerHTML = '';
    
    userData.playHistory.slice(0, 5).forEach(gameUrl => {
        const game = gameData.find(g => g.url === gameUrl);
        if (game) {
            const recentGame = document.createElement('div');
            recentGame.className = 'recent-game';
            recentGame.innerHTML = `${game.icon} ${game.title}`;
            recentGame.addEventListener('click', () => playGame(gameUrl));
            recentGames.appendChild(recentGame);
        }
    });
}

// Áµ±Ë®à„Éë„Éç„É´„ÅÆË°®Á§∫Âàá„ÇäÊõø„Åà
function setupStatsToggle() {
    const statsToggle = document.getElementById('statsToggle');
    const statsPanel = document.getElementById('statsPanel');
    
    statsToggle.addEventListener('click', function() {
        playClickSound();
        if (statsPanel.classList.contains('show')) {
            statsPanel.classList.remove('show');
            this.textContent = 'üìä Áµ±Ë®àË°®Á§∫';
        } else {
            statsPanel.classList.add('show');
            this.textContent = 'üìä Áµ±Ë®àÈùûË°®Á§∫';
            updateStatsDisplay();
        }
    });
}

// „Éá„Éº„Çø‰øùÂ≠òÔºà„É°„É¢„É™„ÅÆ„ÅøÔºâ
function saveUserData() {
    try {
        // Set „Çí Array „Å´Â§âÊèõ„Åó„Å¶‰øùÂ≠ò
        const dataToSave = {
            ...userData,
            exploredCategories: Array.from(userData.exploredCategories)
        };
        sessionStorage.setItem('gamePortalUserData', JSON.stringify(dataToSave));
    } catch (error) {
        console.log('„Éá„Éº„Çø„Çí‰øùÂ≠ò„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü:', error);
    }
}

// „Éá„Éº„ÇøË™≠„ÅøËæº„Åø
function loadUserData() {
    try {
        const saved = sessionStorage.getItem('gamePortalUserData');
        if (saved) {
            const parsedData = JSON.parse(saved);
            userData = {
                ...userData,
                ...parsedData,
                exploredCategories: new Set(parsedData.exploredCategories || [])
            };
        }
    } catch (error) {
        console.log('„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„ÇÅ„Åæ„Åõ„Çì„Åß„Åó„Åü:', error);
    }
}

// Ë°®Á§∫„Åï„Çå„Å¶„ÅÑ„Çã„Éú„Çø„É≥„Å´„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
function animateVisibleButtons() {
    const visibleButtons = document.querySelectorAll('.game-button:not(.hidden)');
    
    visibleButtons.forEach((button, index) => {
        button.style.animationDelay = `${index * 0.05}s`;
        button.style.animation = 'none';
        setTimeout(() => {
            button.style.animation = 'fadeInUp 0.4s ease forwards';
        }, 10);
    });
}

// Êñ∞„Åó„ÅÑ„Ç≤„Éº„É†„ÅÆ„Éè„Ç§„É©„Ç§„ÉàÔºàÊîπËâØÁâàÔºâ
function highlightNewGames() {
    const newGames = gameData.filter(game => game.isNew);
    
    newGames.forEach(game => {
        const button = document.querySelector(`[data-url="${game.url}"]`);
        if (button) {
            button.classList.add('highlight');
            
            // ÁâπÂà•„Å™ÂäπÊûúÈü≥
            setTimeout(() => playClickSound(), Math.random() * 2000);
            
            // 10ÁßíÂæå„Å´„Éè„Ç§„É©„Ç§„Éà„ÇíÂâäÈô§
            setTimeout(() => {
                button.classList.remove('highlight');
            }, 10000);
        }
    });
}

// „Ç≠„Éº„Éú„Éº„Éâ„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥ÔºàÊîπËâØÁâàÔºâ
function setupKeyboardNavigation() {
    let focusedIndex = -1;
    
    document.addEventListener('keydown', function(event) {
        const gameButtons = Array.from(document.querySelectorAll('.game-button:not(.hidden)'));
        
        if (gameButtons.length === 0) return;
        
        switch(event.key) {
            case 'Tab':
                // „Éá„Éï„Ç©„É´„Éà„ÅÆTabÂãï‰Ωú„ÇíÁ∂≠ÊåÅ
                break;
                
            case 'ArrowRight':
            case 'ArrowDown':
                event.preventDefault();
                focusedIndex = Math.min(focusedIndex + 1, gameButtons.length - 1);
                gameButtons[focusedIndex].focus();
                break;
                
            case 'ArrowLeft':
            case 'ArrowUp':
                event.preventDefault();
                focusedIndex = Math.max(focusedIndex - 1, 0);
                gameButtons[focusedIndex].focus();
                break;
                
            case 'Home':
                event.preventDefault();
                focusedIndex = 0;
                gameButtons[focusedIndex].focus();
                break;
                
            case 'End':
                event.preventDefault();
                focusedIndex = gameButtons.length - 1;
                gameButtons[focusedIndex].focus();
                break;
        }
    });
}

// „Éè„Éó„ÉÜ„Ç£„ÉÉ„ÇØ„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØÔºàÊîπËâØÁâàÔºâ
function addHapticFeedback() {
    if ('vibrate' in navigator) {
        const gameButtons = document.querySelectorAll('.game-button');
        gameButtons.forEach(button => {
            button.addEventListener('touchstart', () => {
                navigator.vibrate(30); // ËªΩ„ÅÑÊåØÂãï
            });
            
            button.addEventListener('click', () => {
                navigator.vibrate([50, 20, 50]); // „Éë„Çø„Éº„É≥ÊåØÂãï
            });
        });
    }
}

// ÈÅÖÂª∂Ë™≠„ÅøËæº„ÅøÊ©üËÉΩ
function setupLazyLoading() {
    if ('IntersectionObserver' in window) {
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('loaded');
                    observer.unobserve(entry.target);
                }
            });
        }, { threshold: 0.1 });
        
        document.querySelectorAll('.game-button').forEach(button => {
            observer.observe(button);
        });
    }
}

// „Çπ„ÉØ„Ç§„Éó„Ç∏„Çß„Çπ„ÉÅ„É£„ÉºÊ©üËÉΩ
function addSwipeGestures() {
    let startX = 0;
    let startY = 0;
    
    document.addEventListener('touchstart', function(e) {
        startX = e.touches[0].clientX;
        startY = e.touches[0].clientY;
    });
    
    document.addEventListener('touchend', function(e) {
        if (!startX || !startY) return;
        
        const endX = e.changedTouches[0].clientX;
        const endY = e.changedTouches[0].clientY;
        
        const diffX = startX - endX;
        const diffY = startY - endY;
        
        // Ê∞¥Âπ≥„Çπ„ÉØ„Ç§„Éó„Åß„Ç´„ÉÜ„Ç¥„É™Âàá„ÇäÊõø„Åà
        if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > 50) {
            const categoryButtons = Array.from(document.querySelectorAll('.category-btn'));
            const activeIndex = categoryButtons.findIndex(btn => btn.classList.contains('active'));
            
            if (diffX > 0 && activeIndex < categoryButtons.length - 1) {
                // Â∑¶„Çπ„ÉØ„Ç§„Éó - Ê¨°„ÅÆ„Ç´„ÉÜ„Ç¥„É™
                categoryButtons[activeIndex + 1].click();
            } else if (diffX < 0 && activeIndex > 0) {
                // Âè≥„Çπ„ÉØ„Ç§„Éó - Ââç„ÅÆ„Ç´„ÉÜ„Ç¥„É™
                categoryButtons[activeIndex - 1].click();
            }
        }
        
        startX = 0;
        startY = 0;
    });
}

// „É¨„Çπ„Éù„É≥„Ç∑„Éñ„Éá„Ç∂„Ç§„É≥„ÅÆË™øÊï¥ÔºàÊîπËâØÁâàÔºâ
function adjustForMobile() {
    const isMobile = window.innerWidth <= 768;
    const isTablet = window.innerWidth <= 1024 && window.innerWidth > 768;
    
    const root = document.documentElement;
    
    if (isMobile) {
        root.style.setProperty('--button-size', '100px');
        root.style.setProperty('--icon-size', '2rem');
        root.style.setProperty('--font-size', '0.9rem');
    } else if (isTablet) {
        root.style.setProperty('--button-size', '110px');
        root.style.setProperty('--icon-size', '2.2rem');
        root.style.setProperty('--font-size', '1rem');
    } else {
        root.style.setProperty('--button-size', '120px');
        root.style.setProperty('--icon-size', '2.5rem');
        root.style.setProperty('--font-size', '1.1rem');
    }
}

// „Ç¶„Ç£„É≥„Éâ„Ç¶„Çµ„Ç§„Ç∫Â§âÊõ¥ÊôÇ„ÅÆË™øÊï¥
window.addEventListener('resize', debounce(adjustForMobile, 250));

// „Éá„Éê„Ç¶„É≥„ÇπÈñ¢Êï∞
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// „Éú„Çø„É≥„ÅÆ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥Èñ¢Êï∞ÔºàÊîπËâØÁâàÔºâ
function animateButtons() {
    const buttons = document.querySelectorAll('.game-button');
    
    buttons.forEach((button, index) => {
        button.style.opacity = '0';
        button.style.transform = 'translateY(20px) scale(0.9)';
        
        setTimeout(() => {
            button.style.transition = 'all 0.5s cubic-bezier(0.4, 0, 0.2, 1)';
            button.style.opacity = '1';
            button.style.transform = 'translateY(0) scale(1)';
        }, index * 30);
    });
}

// „Åä„Åô„Åô„ÇÅ„Ç≤„Éº„É†Ê©üËÉΩÔºàÊîπËâØÁâàÔºâ
function showRecommendations() {
    // ÊúÄ„ÇÇ„Éó„É¨„Ç§„Åó„Åü„Ç´„ÉÜ„Ç¥„É™„ÇíÂàÜÊûê
    const categoryCount = {};
    userData.playHistory.forEach(url => {
        const game = gameData.find(g => g.url === url);
        if (game) {
            game.category.split(' ').forEach(cat => {
                categoryCount[cat] = (categoryCount[cat] || 0) + 1;
            });
        }
    });
    
    // „Åä„Åô„Åô„ÇÅ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
    if (userData.totalPlays >= 3) {
        const favoriteCategory = Object.keys(categoryCount).reduce((a, b) => 
            categoryCount[a] > categoryCount[b] ? a : b, 'action');
        
        const categoryName = categories[favoriteCategory]?.name || '„Ç¢„ÇØ„Ç∑„Éß„É≥';
        
        console.log(`üéØ „Åä„Åô„Åô„ÇÅ: ${categoryName}„Ç≤„Éº„É†„Åå„ÅäÂ•Ω„Åø„ÅÆ„Çà„ÅÜ„Åß„Åô„Å≠ÔºÅ`);
        
        // Êú™„Éó„É¨„Ç§„ÅÆÂêå„Ç´„ÉÜ„Ç¥„É™„Ç≤„Éº„É†„ÇíÊé®Ëñ¶
        const unplayedSameCategory = gameData.filter(game => 
            game.category.includes(favoriteCategory) && 
            !userData.playHistory.includes(game.url)
        );
        
        if (unplayedSameCategory.length > 0) {
            const recommended = unplayedSameCategory[0];
            console.log(`üåü „Äå${recommended.title}„Äç„ÅØ„ÅÑ„Åã„Åå„Åß„Åô„ÅãÔºü`);
        }
    }
}

// ÂÆöÊúüÁöÑ„Å™Âä±„Åæ„Åó„É°„ÉÉ„Çª„Éº„Ç∏
function showEncouragingMessages() {
    const messages = [
        'üéÆ Êñ∞„Åó„ÅÑ„Ç≤„Éº„É†„Å´ÊåëÊà¶„Åó„Å¶„Åø„Åæ„Åõ„Çì„ÅãÔºü',
        '‚≠ê „ÅäÊ∞ó„Å´ÂÖ•„Çä„ÅÆ„Ç≤„Éº„É†„ÇíË¶ã„Å§„Åë„Åæ„Åó„Åü„ÅãÔºü',
        'üèÜ ÂÆüÁ∏æËß£Èô§„Åæ„Åß„ÅÇ„Å®Â∞ë„ÅóÔºÅ',
        'üåü ‰ªäÊó•„ÇÇÊ•Ω„Åó„Åè„Ç≤„Éº„É†„Åó„Åæ„Åó„Çá„ÅÜÔºÅ',
        'üéØ „Åæ„Å†ÈÅä„Çì„Åß„ÅÑ„Å™„ÅÑ„Ç∏„É£„É≥„É´„Åå„ÅÇ„Çä„Åæ„Åô„ÇàÔºÅ'
    ];
    
    // 5ÂàÜ„Åä„Åç„Å´„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫Ôºà„Éá„É¢Áî®„ÅØ30ÁßíÔºâ
    if (userData.totalPlays > 0) {
        setTimeout(() => {
            const randomMessage = messages[Math.floor(Math.random() * messages.length)];
            showTemporaryMessage(randomMessage);
            
            // Ê¨°„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„Çí„Çπ„Ç±„Ç∏„É•„Éº„É´
            setTimeout(showEncouragingMessages, 300000); // 5ÂàÜÂæå
        }, 30000); // 30ÁßíÂæå
    }
}

// ‰∏ÄÊôÇÁöÑ„Å™„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫
function showTemporaryMessage(message) {
    const messageDiv = document.createElement('div');
    messageDiv.style.cssText = `
        position: fixed;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        background: linear-gradient(45deg, #4CAF50, #45a049);
        color: white;
        padding: 15px 25px;
        border-radius: 25px;
        font-size: 1rem;
        font-weight: 500;
        z-index: 1000;
        box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
        animation: slideUpMessage 0.5s ease;
        max-width: 90%;
        text-align: center;
    `;
    messageDiv.textContent = message;
    
    document.body.appendChild(messageDiv);
    
    // 4ÁßíÂæå„Å´ÂâäÈô§
    setTimeout(() => {
        messageDiv.style.animation = 'slideDownMessage 0.5s ease forwards';
        setTimeout(() => messageDiv.remove(), 500);
    }, 4000);
}

// „Éö„Éº„Ç∏„ÅåË™≠„ÅøËæº„Åæ„Çå„ÅüÊôÇ„ÅÆÂá¶ÁêÜ
document.addEventListener('DOMContentLoaded', function() {
    // „Éá„Éº„ÇøË™≠„ÅøËæº„Åø
    loadUserData();
    
    // Âü∫Êú¨Ê©üËÉΩ„ÅÆÂàùÊúüÂåñ
    createGameButtons();
    setupSearch();
    setupCategoryFilter();
    setupSortFunction();
    setupStatsToggle();
    
    // UI„ÅÆÊîπËâØÊ©üËÉΩ
    setupKeyboardNavigation();
    addHapticFeedback();
    setupLazyLoading();
    addSwipeGestures();
    
    // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
    animateButtons();
    highlightNewGames();
    
    // „É¨„Çπ„Éù„É≥„Ç∑„ÉñÂØæÂøú
    adjustForMobile();
    
    // Áµ±Ë®àË°®Á§∫„ÅÆÊõ¥Êñ∞
    updateStatsDisplay();
    updateRecentGames();
    
    // „Ç≤„Éº„É†Á∑èÊï∞„ÇíË°®Á§∫
    document.getElementById('totalGames').textContent = gameData.length;
    filterGames(); // ÂàùÊúüË°®Á§∫ÊôÇ„Å´„Éï„Ç£„É´„Çø„É™„É≥„Ç∞„ÇíÈÅ©Áî®
    
    // „Åä„Åô„Åô„ÇÅ„Ç≤„Éº„É†„ÅÆË°®Á§∫
    showRecommendations();
    
    // Âä±„Åæ„Åó„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÈñãÂßã
    showEncouragingMessages();
    
    // „Ç¶„Çß„É´„Ç´„É†„É°„ÉÉ„Çª„Éº„Ç∏
    if (userData.totalPlays === 0) {
        setTimeout(() => {
            showTemporaryMessage('üéÆ „Ç≤„Éº„É†„Éù„Éº„Çø„É´„Å∏„Çà„ÅÜ„Åì„ÅùÔºÅÂ•Ω„Åç„Å™„Ç≤„Éº„É†„ÇíÈÅ∏„Çì„ÅßÈÅä„Çì„Åß„Åø„Å¶„Å≠ÔºÅ');
        }, 2000);
    } else {
        setTimeout(() => {
            showTemporaryMessage(`üåü „Åä„Åã„Åà„Çä„Å™„Åï„ÅÑÔºÅ„Åì„Çå„Åæ„Åß${userData.totalPlays}Âõû„Ç≤„Éº„É†„ÇíÊ•Ω„Åó„Çì„Åß„ÅÑ„Åæ„Åô„Å≠ÔºÅ`);
        }, 2000);
    }
});

// „Ç∞„É≠„Éº„Éê„É´Èñ¢Êï∞„Å®„Åó„Å¶ÂÖ¨Èñã
window.showAchievement = showAchievement;
window.playClickSound = playClickSound;

// „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
window.addEventListener('error', function(event) {
    console.log('„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:', event.error);
});

// „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁõ£Ë¶ñ
if ('performance' in window) {
    window.addEventListener('load', function() {
        setTimeout(() => {
            const perfData = performance.getEntriesByType('navigation')[0];
            console.log('„Éö„Éº„Ç∏Ë™≠„ÅøËæº„ÅøÊôÇÈñì:', perfData.loadEventEnd - perfData.loadEventStart, 'ms');
        }, 0);
    });
}

// ËøΩÂä†„ÅÆCSS„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÔºàÂãïÁöÑ„Å´ËøΩÂä†Ôºâ
const additionalStyles = document.createElement('style');
additionalStyles.textContent = `
    @keyframes slideUpMessage {
        from {
            opacity: 0;
            transform: translateX(-50%) translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateX(-50%) translateY(0);
        }
    }

    @keyframes slideDownMessage {
        from {
            opacity: 1;
            transform: translateX(-50%) translateY(0);
        }
        to {
            opacity: 0;
            transform: translateX(-50%) translateY(20px);
        }
    }

    @keyframes slideOutAchievement {
        to {
            transform: translateX(100%);
            opacity: 0;
        }
    }

    /* Êñ∞„Ç≤„Éº„É†„ÅÆÁâπÂà•„Å™„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ */
    .game-button[data-url*="rakka"] .game-icon {
        animation: float 2s ease-in-out infinite, fallDown 3s ease-in-out infinite;
    }

    .game-button[data-url*="yugudora"] .game-icon {
        animation: float 2s ease-in-out infinite, mysticalGlow 4s ease-in-out infinite;
    }

    @keyframes fallDown {
        0%, 100% { transform: translateY(0px) rotate(0deg); }
        25% { transform: translateY(-8px) rotate(-5deg); }
        50% { transform: translateY(0px) rotate(0deg); }
        75% { transform: translateY(8px) rotate(5deg); }
    }

    @keyframes mysticalGlow {
        0%, 100% { filter: hue-rotate(0deg) brightness(1); }
        25% { filter: hue-rotate(90deg) brightness(1.2); }
        50% { filter: hue-rotate(180deg) brightness(1); }
        75% { filter: hue-rotate(270deg) brightness(1.2); }
    }
`;
document.head.appendChild(additionalStyles);

// Emoji to SVG conversion
document.addEventListener('DOMContentLoaded', () => {
    if (window.twemoji) {
        const parseOptions = { folder: 'svg', ext: '.svg', className: 'emoji' };
        twemoji.parse(document.body, parseOptions);

        const observer = new MutationObserver(mutations => {
            mutations.forEach(m => {
                m.addedNodes.forEach(node => {
                    if (node.nodeType === 1) {
                        twemoji.parse(node, parseOptions);
                    } else if (node.nodeType === 3 && node.parentNode) {
                        twemoji.parse(node.parentNode, parseOptions);
                    }
                });
                if (m.type === 'characterData' && m.target.parentNode) {
                    twemoji.parse(m.target.parentNode, parseOptions);
                }
            });
        });
        observer.observe(document.body, { childList: true, subtree: true, characterData: true });
    }
});
